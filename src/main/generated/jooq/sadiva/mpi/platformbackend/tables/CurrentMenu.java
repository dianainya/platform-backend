/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.CurrentMenuRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrentMenu extends TableImpl<CurrentMenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.current_menu</code>
     */
    public static final CurrentMenu CURRENT_MENU = new CurrentMenu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrentMenuRecord> getRecordType() {
        return CurrentMenuRecord.class;
    }

    /**
     * The column <code>s283945.current_menu.dish_id</code>.
     */
    public final TableField<CurrentMenuRecord, UUID> DISH_ID = createField(DSL.name("dish_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.current_menu.amount</code>.
     */
    public final TableField<CurrentMenuRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private CurrentMenu(Name alias, Table<CurrentMenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrentMenu(Name alias, Table<CurrentMenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.current_menu</code> table reference
     */
    public CurrentMenu(String alias) {
        this(DSL.name(alias), CURRENT_MENU);
    }

    /**
     * Create an aliased <code>s283945.current_menu</code> table reference
     */
    public CurrentMenu(Name alias) {
        this(alias, CURRENT_MENU);
    }

    /**
     * Create a <code>s283945.current_menu</code> table reference
     */
    public CurrentMenu() {
        this(DSL.name("current_menu"), null);
    }

    public <O extends Record> CurrentMenu(Table<O> child, ForeignKey<O, CurrentMenuRecord> key) {
        super(child, key, CURRENT_MENU);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public List<ForeignKey<CurrentMenuRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CURRENT_MENU__CURRENT_MENU_DISH_ID_FKEY);
    }

    private transient Dish _dish;

    /**
     * Get the implicit join path to the <code>s283945.dish</code> table.
     */
    public Dish dish() {
        if (_dish == null)
            _dish = new Dish(this, Keys.CURRENT_MENU__CURRENT_MENU_DISH_ID_FKEY);

        return _dish;
    }

    @Override
    public List<Check<CurrentMenuRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("current_menu_amount_check"), "((amount >= 0))", true)
        );
    }

    @Override
    public CurrentMenu as(String alias) {
        return new CurrentMenu(DSL.name(alias), this);
    }

    @Override
    public CurrentMenu as(Name alias) {
        return new CurrentMenu(alias, this);
    }

    @Override
    public CurrentMenu as(Table<?> alias) {
        return new CurrentMenu(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentMenu rename(String name) {
        return new CurrentMenu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentMenu rename(Name name) {
        return new CurrentMenu(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentMenu rename(Table<?> name) {
        return new CurrentMenu(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
