/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.Public;
import jooq.sadiva.mpi.platformbackend.tables.records.DishReceiptRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DishReceipt extends TableImpl<DishReceiptRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dish_receipt</code>
     */
    public static final DishReceipt DISH_RECEIPT = new DishReceipt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DishReceiptRecord> getRecordType() {
        return DishReceiptRecord.class;
    }

    /**
     * The column <code>public.dish_receipt.product_id</code>.
     */
    public final TableField<DishReceiptRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dish_receipt.dish_id</code>.
     */
    public final TableField<DishReceiptRecord, UUID> DISH_ID = createField(DSL.name("dish_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.dish_receipt.weight</code>.
     */
    public final TableField<DishReceiptRecord, Integer> WEIGHT = createField(DSL.name("weight"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dish_receipt.amount</code>.
     */
    public final TableField<DishReceiptRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    private DishReceipt(Name alias, Table<DishReceiptRecord> aliased) {
        this(alias, aliased, null);
    }

    private DishReceipt(Name alias, Table<DishReceiptRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.dish_receipt</code> table reference
     */
    public DishReceipt(String alias) {
        this(DSL.name(alias), DISH_RECEIPT);
    }

    /**
     * Create an aliased <code>public.dish_receipt</code> table reference
     */
    public DishReceipt(Name alias) {
        this(alias, DISH_RECEIPT);
    }

    /**
     * Create a <code>public.dish_receipt</code> table reference
     */
    public DishReceipt() {
        this(DSL.name("dish_receipt"), null);
    }

    public <O extends Record> DishReceipt(Table<O> child, ForeignKey<O, DishReceiptRecord> key) {
        super(child, key, DISH_RECEIPT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DishReceiptRecord> getPrimaryKey() {
        return Keys.DISH_RECEIPT_PKEY;
    }

    @Override
    public List<ForeignKey<DishReceiptRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DISH_RECEIPT__DISH_RECEIPT_PRODUCT_ID_FKEY, Keys.DISH_RECEIPT__DISH_RECEIPT_DISH_ID_FKEY);
    }

    private transient Product _product;
    private transient Dish _dish;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.DISH_RECEIPT__DISH_RECEIPT_PRODUCT_ID_FKEY);

        return _product;
    }

    /**
     * Get the implicit join path to the <code>public.dish</code> table.
     */
    public Dish dish() {
        if (_dish == null)
            _dish = new Dish(this, Keys.DISH_RECEIPT__DISH_RECEIPT_DISH_ID_FKEY);

        return _dish;
    }

    @Override
    public DishReceipt as(String alias) {
        return new DishReceipt(DSL.name(alias), this);
    }

    @Override
    public DishReceipt as(Name alias) {
        return new DishReceipt(alias, this);
    }

    @Override
    public DishReceipt as(Table<?> alias) {
        return new DishReceipt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DishReceipt rename(String name) {
        return new DishReceipt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DishReceipt rename(Name name) {
        return new DishReceipt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DishReceipt rename(Table<?> name) {
        return new DishReceipt(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
