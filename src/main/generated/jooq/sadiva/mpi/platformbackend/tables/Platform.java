/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PlatformRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Platform extends TableImpl<PlatformRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.platform</code>
     */
    public static final Platform PLATFORM = new Platform();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformRecord> getRecordType() {
        return PlatformRecord.class;
    }

    /**
     * The column <code>s283945.platform.id</code>.
     */
    public final TableField<PlatformRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>s283945.platform.code</code>.
     */
    public final TableField<PlatformRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>s283945.platform.name</code>.
     */
    public final TableField<PlatformRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>s283945.platform.description</code>.
     */
    public final TableField<PlatformRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>s283945.platform.floor_amount</code>.
     */
    public final TableField<PlatformRecord, Integer> FLOOR_AMOUNT = createField(DSL.name("floor_amount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>s283945.platform.created_at</code>.
     */
    public final TableField<PlatformRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>s283945.platform.updated_at</code>.
     */
    public final TableField<PlatformRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Platform(Name alias, Table<PlatformRecord> aliased) {
        this(alias, aliased, null);
    }

    private Platform(Name alias, Table<PlatformRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.platform</code> table reference
     */
    public Platform(String alias) {
        this(DSL.name(alias), PLATFORM);
    }

    /**
     * Create an aliased <code>s283945.platform</code> table reference
     */
    public Platform(Name alias) {
        this(alias, PLATFORM);
    }

    /**
     * Create a <code>s283945.platform</code> table reference
     */
    public Platform() {
        this(DSL.name("platform"), null);
    }

    public <O extends Record> Platform(Table<O> child, ForeignKey<O, PlatformRecord> key) {
        super(child, key, PLATFORM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public UniqueKey<PlatformRecord> getPrimaryKey() {
        return Keys.PLATFORM_PKEY;
    }

    @Override
    public List<UniqueKey<PlatformRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PLATFORM_CODE_KEY);
    }

    @Override
    public Platform as(String alias) {
        return new Platform(DSL.name(alias), this);
    }

    @Override
    public Platform as(Name alias) {
        return new Platform(alias, this);
    }

    @Override
    public Platform as(Table<?> alias) {
        return new Platform(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Platform rename(String name) {
        return new Platform(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Platform rename(Name name) {
        return new Platform(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Platform rename(Table<?> name) {
        return new Platform(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, String, Integer, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super String, ? super String, ? super String, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super String, ? super String, ? super String, ? super Integer, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
