/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PlatformHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlatformHistory extends TableImpl<PlatformHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.platform_history</code>
     */
    public static final PlatformHistory PLATFORM_HISTORY = new PlatformHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformHistoryRecord> getRecordType() {
        return PlatformHistoryRecord.class;
    }

    /**
     * The column <code>s283945.platform_history.platform_id</code>.
     */
    public final TableField<PlatformHistoryRecord, UUID> PLATFORM_ID = createField(DSL.name("platform_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.platform_history.floor</code>.
     */
    public final TableField<PlatformHistoryRecord, Integer> FLOOR = createField(DSL.name("floor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>s283945.platform_history.first_prisoner</code>.
     */
    public final TableField<PlatformHistoryRecord, UUID> FIRST_PRISONER = createField(DSL.name("first_prisoner"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>s283945.platform_history.second_prisoner</code>.
     */
    public final TableField<PlatformHistoryRecord, UUID> SECOND_PRISONER = createField(DSL.name("second_prisoner"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.platform_history.startdate</code>.
     */
    public final TableField<PlatformHistoryRecord, LocalDate> STARTDATE = createField(DSL.name("startdate"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_DATE"), SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>s283945.platform_history.enddate</code>.
     */
    public final TableField<PlatformHistoryRecord, LocalDate> ENDDATE = createField(DSL.name("enddate"), SQLDataType.LOCALDATE, this, "");

    private PlatformHistory(Name alias, Table<PlatformHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlatformHistory(Name alias, Table<PlatformHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.platform_history</code> table reference
     */
    public PlatformHistory(String alias) {
        this(DSL.name(alias), PLATFORM_HISTORY);
    }

    /**
     * Create an aliased <code>s283945.platform_history</code> table reference
     */
    public PlatformHistory(Name alias) {
        this(alias, PLATFORM_HISTORY);
    }

    /**
     * Create a <code>s283945.platform_history</code> table reference
     */
    public PlatformHistory() {
        this(DSL.name("platform_history"), null);
    }

    public <O extends Record> PlatformHistory(Table<O> child, ForeignKey<O, PlatformHistoryRecord> key) {
        super(child, key, PLATFORM_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public UniqueKey<PlatformHistoryRecord> getPrimaryKey() {
        return Keys.PLATFORM_HISTORY_PKEY;
    }

    @Override
    public List<ForeignKey<PlatformHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_PLATFORM_ID_FKEY, Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_FIRST_PRISONER_FKEY, Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_SECOND_PRISONER_FKEY);
    }

    private transient Platform _platform;
    private transient Prisoner _platformHistoryFirstPrisonerFkey;
    private transient Prisoner _platformHistorySecondPrisonerFkey;

    /**
     * Get the implicit join path to the <code>s283945.platform</code> table.
     */
    public Platform platform() {
        if (_platform == null)
            _platform = new Platform(this, Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_PLATFORM_ID_FKEY);

        return _platform;
    }

    /**
     * Get the implicit join path to the <code>s283945.prisoner</code> table,
     * via the <code>platform_history_first_prisoner_fkey</code> key.
     */
    public Prisoner platformHistoryFirstPrisonerFkey() {
        if (_platformHistoryFirstPrisonerFkey == null)
            _platformHistoryFirstPrisonerFkey = new Prisoner(this, Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_FIRST_PRISONER_FKEY);

        return _platformHistoryFirstPrisonerFkey;
    }

    /**
     * Get the implicit join path to the <code>s283945.prisoner</code> table,
     * via the <code>platform_history_second_prisoner_fkey</code> key.
     */
    public Prisoner platformHistorySecondPrisonerFkey() {
        if (_platformHistorySecondPrisonerFkey == null)
            _platformHistorySecondPrisonerFkey = new Prisoner(this, Keys.PLATFORM_HISTORY__PLATFORM_HISTORY_SECOND_PRISONER_FKEY);

        return _platformHistorySecondPrisonerFkey;
    }

    @Override
    public PlatformHistory as(String alias) {
        return new PlatformHistory(DSL.name(alias), this);
    }

    @Override
    public PlatformHistory as(Name alias) {
        return new PlatformHistory(alias, this);
    }

    @Override
    public PlatformHistory as(Table<?> alias) {
        return new PlatformHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformHistory rename(String name) {
        return new PlatformHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformHistory rename(Name name) {
        return new PlatformHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformHistory rename(Table<?> name) {
        return new PlatformHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, Integer, UUID, UUID, LocalDate, LocalDate> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super Integer, ? super UUID, ? super UUID, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super Integer, ? super UUID, ? super UUID, ? super LocalDate, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
