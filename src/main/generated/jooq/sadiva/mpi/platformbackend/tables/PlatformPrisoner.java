/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PlatformPrisonerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlatformPrisoner extends TableImpl<PlatformPrisonerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.platform_prisoner</code>
     */
    public static final PlatformPrisoner PLATFORM_PRISONER = new PlatformPrisoner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformPrisonerRecord> getRecordType() {
        return PlatformPrisonerRecord.class;
    }

    /**
     * The column <code>s283945.platform_prisoner.floor</code>.
     */
    public final TableField<PlatformPrisonerRecord, Integer> FLOOR = createField(DSL.name("floor"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>s283945.platform_prisoner.first_prisoner</code>.
     */
    public final TableField<PlatformPrisonerRecord, UUID> FIRST_PRISONER = createField(DSL.name("first_prisoner"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>s283945.platform_prisoner.second_prisoner</code>.
     */
    public final TableField<PlatformPrisonerRecord, UUID> SECOND_PRISONER = createField(DSL.name("second_prisoner"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.platform_prisoner.is_active</code>.
     */
    public final TableField<PlatformPrisonerRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private PlatformPrisoner(Name alias, Table<PlatformPrisonerRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlatformPrisoner(Name alias, Table<PlatformPrisonerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.platform_prisoner</code> table reference
     */
    public PlatformPrisoner(String alias) {
        this(DSL.name(alias), PLATFORM_PRISONER);
    }

    /**
     * Create an aliased <code>s283945.platform_prisoner</code> table reference
     */
    public PlatformPrisoner(Name alias) {
        this(alias, PLATFORM_PRISONER);
    }

    /**
     * Create a <code>s283945.platform_prisoner</code> table reference
     */
    public PlatformPrisoner() {
        this(DSL.name("platform_prisoner"), null);
    }

    public <O extends Record> PlatformPrisoner(Table<O> child, ForeignKey<O, PlatformPrisonerRecord> key) {
        super(child, key, PLATFORM_PRISONER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public UniqueKey<PlatformPrisonerRecord> getPrimaryKey() {
        return Keys.PLATFORM_PRISONER_PKEY;
    }

    @Override
    public List<ForeignKey<PlatformPrisonerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLATFORM_PRISONER__PLATFORM_PRISONER_FIRST_PRISONER_FKEY, Keys.PLATFORM_PRISONER__PLATFORM_PRISONER_SECOND_PRISONER_FKEY);
    }

    private transient Prisoner _platformPrisonerFirstPrisonerFkey;
    private transient Prisoner _platformPrisonerSecondPrisonerFkey;

    /**
     * Get the implicit join path to the <code>s283945.prisoner</code> table,
     * via the <code>platform_prisoner_first_prisoner_fkey</code> key.
     */
    public Prisoner platformPrisonerFirstPrisonerFkey() {
        if (_platformPrisonerFirstPrisonerFkey == null)
            _platformPrisonerFirstPrisonerFkey = new Prisoner(this, Keys.PLATFORM_PRISONER__PLATFORM_PRISONER_FIRST_PRISONER_FKEY);

        return _platformPrisonerFirstPrisonerFkey;
    }

    /**
     * Get the implicit join path to the <code>s283945.prisoner</code> table,
     * via the <code>platform_prisoner_second_prisoner_fkey</code> key.
     */
    public Prisoner platformPrisonerSecondPrisonerFkey() {
        if (_platformPrisonerSecondPrisonerFkey == null)
            _platformPrisonerSecondPrisonerFkey = new Prisoner(this, Keys.PLATFORM_PRISONER__PLATFORM_PRISONER_SECOND_PRISONER_FKEY);

        return _platformPrisonerSecondPrisonerFkey;
    }

    @Override
    public PlatformPrisoner as(String alias) {
        return new PlatformPrisoner(DSL.name(alias), this);
    }

    @Override
    public PlatformPrisoner as(Name alias) {
        return new PlatformPrisoner(alias, this);
    }

    @Override
    public PlatformPrisoner as(Table<?> alias) {
        return new PlatformPrisoner(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformPrisoner rename(String name) {
        return new PlatformPrisoner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformPrisoner rename(Name name) {
        return new PlatformPrisoner(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformPrisoner rename(Table<?> name) {
        return new PlatformPrisoner(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, UUID, UUID, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super UUID, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super UUID, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
