/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PlatformUserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlatformUser extends TableImpl<PlatformUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.platform_user</code>
     */
    public static final PlatformUser PLATFORM_USER = new PlatformUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformUserRecord> getRecordType() {
        return PlatformUserRecord.class;
    }

    /**
     * The column <code>s283945.platform_user.user_id</code>.
     */
    public final TableField<PlatformUserRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>s283945.platform_user.username</code>.
     */
    public final TableField<PlatformUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>s283945.platform_user.password</code>.
     */
    public final TableField<PlatformUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>s283945.platform_user.activated</code>.
     */
    public final TableField<PlatformUserRecord, Boolean> ACTIVATED = createField(DSL.name("activated"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private PlatformUser(Name alias, Table<PlatformUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlatformUser(Name alias, Table<PlatformUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.platform_user</code> table reference
     */
    public PlatformUser(String alias) {
        this(DSL.name(alias), PLATFORM_USER);
    }

    /**
     * Create an aliased <code>s283945.platform_user</code> table reference
     */
    public PlatformUser(Name alias) {
        this(alias, PLATFORM_USER);
    }

    /**
     * Create a <code>s283945.platform_user</code> table reference
     */
    public PlatformUser() {
        this(DSL.name("platform_user"), null);
    }

    public <O extends Record> PlatformUser(Table<O> child, ForeignKey<O, PlatformUserRecord> key) {
        super(child, key, PLATFORM_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public UniqueKey<PlatformUserRecord> getPrimaryKey() {
        return Keys.PLATFORM_USER_PKEY;
    }

    @Override
    public List<UniqueKey<PlatformUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PLATFORM_USER_USERNAME_KEY);
    }

    @Override
    public PlatformUser as(String alias) {
        return new PlatformUser(DSL.name(alias), this);
    }

    @Override
    public PlatformUser as(Name alias) {
        return new PlatformUser(alias, this);
    }

    @Override
    public PlatformUser as(Table<?> alias) {
        return new PlatformUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformUser rename(String name) {
        return new PlatformUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformUser rename(Name name) {
        return new PlatformUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlatformUser rename(Table<?> name) {
        return new PlatformUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
