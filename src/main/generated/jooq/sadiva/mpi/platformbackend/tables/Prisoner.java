/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PrisonerRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prisoner extends TableImpl<PrisonerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.prisoner</code>
     */
    public static final Prisoner PRISONER = new Prisoner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrisonerRecord> getRecordType() {
        return PrisonerRecord.class;
    }

    /**
     * The column <code>s283945.prisoner.id</code>.
     */
    public final TableField<PrisonerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>s283945.prisoner.first_name</code>.
     */
    public final TableField<PrisonerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>s283945.prisoner.patronymic</code>.
     */
    public final TableField<PrisonerRecord, String> PATRONYMIC = createField(DSL.name("patronymic"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>s283945.prisoner.last_name</code>.
     */
    public final TableField<PrisonerRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>s283945.prisoner.weight</code>.
     */
    public final TableField<PrisonerRecord, Double> WEIGHT = createField(DSL.name("weight"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>s283945.prisoner.birth_date</code>.
     */
    public final TableField<PrisonerRecord, LocalDate> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>s283945.prisoner.passport</code>.
     */
    public final TableField<PrisonerRecord, String> PASSPORT = createField(DSL.name("passport"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>s283945.prisoner.favorite_dish</code>.
     */
    public final TableField<PrisonerRecord, UUID> FAVORITE_DISH = createField(DSL.name("favorite_dish"), SQLDataType.UUID, this, "");

    private Prisoner(Name alias, Table<PrisonerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prisoner(Name alias, Table<PrisonerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.prisoner</code> table reference
     */
    public Prisoner(String alias) {
        this(DSL.name(alias), PRISONER);
    }

    /**
     * Create an aliased <code>s283945.prisoner</code> table reference
     */
    public Prisoner(Name alias) {
        this(alias, PRISONER);
    }

    /**
     * Create a <code>s283945.prisoner</code> table reference
     */
    public Prisoner() {
        this(DSL.name("prisoner"), null);
    }

    public <O extends Record> Prisoner(Table<O> child, ForeignKey<O, PrisonerRecord> key) {
        super(child, key, PRISONER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public UniqueKey<PrisonerRecord> getPrimaryKey() {
        return Keys.PRISONER_PKEY;
    }

    @Override
    public List<UniqueKey<PrisonerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRISONER_PASSPORT_KEY);
    }

    @Override
    public List<ForeignKey<PrisonerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRISONER__PRISONER_FAVORITE_DISH_FKEY);
    }

    private transient Dish _dish;

    /**
     * Get the implicit join path to the <code>s283945.dish</code> table.
     */
    public Dish dish() {
        if (_dish == null)
            _dish = new Dish(this, Keys.PRISONER__PRISONER_FAVORITE_DISH_FKEY);

        return _dish;
    }

    @Override
    public Prisoner as(String alias) {
        return new Prisoner(DSL.name(alias), this);
    }

    @Override
    public Prisoner as(Name alias) {
        return new Prisoner(alias, this);
    }

    @Override
    public Prisoner as(Table<?> alias) {
        return new Prisoner(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prisoner rename(String name) {
        return new Prisoner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prisoner rename(Name name) {
        return new Prisoner(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prisoner rename(Table<?> name) {
        return new Prisoner(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, String, Double, LocalDate, String, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super String, ? super String, ? super Double, ? super LocalDate, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super String, ? super String, ? super Double, ? super LocalDate, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
