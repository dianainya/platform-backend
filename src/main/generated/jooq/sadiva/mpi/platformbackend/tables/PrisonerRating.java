/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.PrisonerRatingRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PrisonerRating extends TableImpl<PrisonerRatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.prisoner_rating</code>
     */
    public static final PrisonerRating PRISONER_RATING = new PrisonerRating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PrisonerRatingRecord> getRecordType() {
        return PrisonerRatingRecord.class;
    }

    /**
     * The column <code>s283945.prisoner_rating.prisoner_id</code>.
     */
    public final TableField<PrisonerRatingRecord, UUID> PRISONER_ID = createField(DSL.name("prisoner_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.prisoner_rating.score</code>.
     */
    public final TableField<PrisonerRatingRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field(DSL.raw("100"), SQLDataType.NUMERIC)), this, "");

    private PrisonerRating(Name alias, Table<PrisonerRatingRecord> aliased) {
        this(alias, aliased, null);
    }

    private PrisonerRating(Name alias, Table<PrisonerRatingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.prisoner_rating</code> table reference
     */
    public PrisonerRating(String alias) {
        this(DSL.name(alias), PRISONER_RATING);
    }

    /**
     * Create an aliased <code>s283945.prisoner_rating</code> table reference
     */
    public PrisonerRating(Name alias) {
        this(alias, PRISONER_RATING);
    }

    /**
     * Create a <code>s283945.prisoner_rating</code> table reference
     */
    public PrisonerRating() {
        this(DSL.name("prisoner_rating"), null);
    }

    public <O extends Record> PrisonerRating(Table<O> child, ForeignKey<O, PrisonerRatingRecord> key) {
        super(child, key, PRISONER_RATING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public List<ForeignKey<PrisonerRatingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRISONER_RATING__PRISONER_RATING_PRISONER_ID_FKEY);
    }

    private transient Prisoner _prisoner;

    /**
     * Get the implicit join path to the <code>s283945.prisoner</code> table.
     */
    public Prisoner prisoner() {
        if (_prisoner == null)
            _prisoner = new Prisoner(this, Keys.PRISONER_RATING__PRISONER_RATING_PRISONER_ID_FKEY);

        return _prisoner;
    }

    @Override
    public PrisonerRating as(String alias) {
        return new PrisonerRating(DSL.name(alias), this);
    }

    @Override
    public PrisonerRating as(Name alias) {
        return new PrisonerRating(alias, this);
    }

    @Override
    public PrisonerRating as(Table<?> alias) {
        return new PrisonerRating(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PrisonerRating rename(String name) {
        return new PrisonerRating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PrisonerRating rename(Name name) {
        return new PrisonerRating(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PrisonerRating rename(Table<?> name) {
        return new PrisonerRating(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
