/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import jooq.sadiva.mpi.platformbackend.Keys;
import jooq.sadiva.mpi.platformbackend.S283945;
import jooq.sadiva.mpi.platformbackend.tables.records.ProductWarehouseRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductWarehouse extends TableImpl<ProductWarehouseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>s283945.product_warehouse</code>
     */
    public static final ProductWarehouse PRODUCT_WAREHOUSE = new ProductWarehouse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductWarehouseRecord> getRecordType() {
        return ProductWarehouseRecord.class;
    }

    /**
     * The column <code>s283945.product_warehouse.product_id</code>.
     */
    public final TableField<ProductWarehouseRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>s283945.product_warehouse.amount</code>.
     */
    public final TableField<ProductWarehouseRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC, this, "");

    private ProductWarehouse(Name alias, Table<ProductWarehouseRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductWarehouse(Name alias, Table<ProductWarehouseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>s283945.product_warehouse</code> table reference
     */
    public ProductWarehouse(String alias) {
        this(DSL.name(alias), PRODUCT_WAREHOUSE);
    }

    /**
     * Create an aliased <code>s283945.product_warehouse</code> table reference
     */
    public ProductWarehouse(Name alias) {
        this(alias, PRODUCT_WAREHOUSE);
    }

    /**
     * Create a <code>s283945.product_warehouse</code> table reference
     */
    public ProductWarehouse() {
        this(DSL.name("product_warehouse"), null);
    }

    public <O extends Record> ProductWarehouse(Table<O> child, ForeignKey<O, ProductWarehouseRecord> key) {
        super(child, key, PRODUCT_WAREHOUSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : S283945.S283945;
    }

    @Override
    public List<ForeignKey<ProductWarehouseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_WAREHOUSE__PRODUCT_WAREHOUSE_PRODUCT_ID_FKEY);
    }

    private transient Product _product;

    /**
     * Get the implicit join path to the <code>s283945.product</code> table.
     */
    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.PRODUCT_WAREHOUSE__PRODUCT_WAREHOUSE_PRODUCT_ID_FKEY);

        return _product;
    }

    @Override
    public List<Check<ProductWarehouseRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("product_warehouse_amount_check"), "((amount > (0)::numeric))", true)
        );
    }

    @Override
    public ProductWarehouse as(String alias) {
        return new ProductWarehouse(DSL.name(alias), this);
    }

    @Override
    public ProductWarehouse as(Name alias) {
        return new ProductWarehouse(alias, this);
    }

    @Override
    public ProductWarehouse as(Table<?> alias) {
        return new ProductWarehouse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWarehouse rename(String name) {
        return new ProductWarehouse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWarehouse rename(Name name) {
        return new ProductWarehouse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductWarehouse rename(Table<?> name) {
        return new ProductWarehouse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, BigDecimal> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
