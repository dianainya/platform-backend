/*
 * This file is generated by jOOQ.
 */
package jooq.sadiva.mpi.platformbackend.tables.records;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.util.UUID;

import jooq.sadiva.mpi.platformbackend.tables.Product;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductRecord extends UpdatableRecordImpl<ProductRecord> implements Record7<UUID, String, Integer, Integer, Integer, Integer, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.product.id</code>.
     */
    public ProductRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.product.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.product.name</code>.
     */
    public ProductRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.product.name</code>.
     */
    @NotNull
    @Size(max = 255)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.product.calories</code>.
     */
    public ProductRecord setCalories(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.product.calories</code>.
     */
    @NotNull
    public Integer getCalories() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.product.proteins</code>.
     */
    public ProductRecord setProteins(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.product.proteins</code>.
     */
    @NotNull
    public Integer getProteins() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.product.fats</code>.
     */
    public ProductRecord setFats(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.product.fats</code>.
     */
    @NotNull
    public Integer getFats() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.product.carbohydrates</code>.
     */
    public ProductRecord setCarbohydrates(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.product.carbohydrates</code>.
     */
    @NotNull
    public Integer getCarbohydrates() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.product.available_weight</code>.
     */
    public ProductRecord setAvailableWeight(Double value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.product.available_weight</code>.
     */
    public Double getAvailableWeight() {
        return (Double) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, Integer, Integer, Integer, Integer, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, String, Integer, Integer, Integer, Integer, Double> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Product.PRODUCT.ID;
    }

    @Override
    public Field<String> field2() {
        return Product.PRODUCT.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Product.PRODUCT.CALORIES;
    }

    @Override
    public Field<Integer> field4() {
        return Product.PRODUCT.PROTEINS;
    }

    @Override
    public Field<Integer> field5() {
        return Product.PRODUCT.FATS;
    }

    @Override
    public Field<Integer> field6() {
        return Product.PRODUCT.CARBOHYDRATES;
    }

    @Override
    public Field<Double> field7() {
        return Product.PRODUCT.AVAILABLE_WEIGHT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getCalories();
    }

    @Override
    public Integer component4() {
        return getProteins();
    }

    @Override
    public Integer component5() {
        return getFats();
    }

    @Override
    public Integer component6() {
        return getCarbohydrates();
    }

    @Override
    public Double component7() {
        return getAvailableWeight();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getCalories();
    }

    @Override
    public Integer value4() {
        return getProteins();
    }

    @Override
    public Integer value5() {
        return getFats();
    }

    @Override
    public Integer value6() {
        return getCarbohydrates();
    }

    @Override
    public Double value7() {
        return getAvailableWeight();
    }

    @Override
    public ProductRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ProductRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ProductRecord value3(Integer value) {
        setCalories(value);
        return this;
    }

    @Override
    public ProductRecord value4(Integer value) {
        setProteins(value);
        return this;
    }

    @Override
    public ProductRecord value5(Integer value) {
        setFats(value);
        return this;
    }

    @Override
    public ProductRecord value6(Integer value) {
        setCarbohydrates(value);
        return this;
    }

    @Override
    public ProductRecord value7(Double value) {
        setAvailableWeight(value);
        return this;
    }

    @Override
    public ProductRecord values(UUID value1, String value2, Integer value3, Integer value4, Integer value5, Integer value6, Double value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductRecord
     */
    public ProductRecord() {
        super(Product.PRODUCT);
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(UUID id, String name, Integer calories, Integer proteins, Integer fats, Integer carbohydrates, Double availableWeight) {
        super(Product.PRODUCT);

        setId(id);
        setName(name);
        setCalories(calories);
        setProteins(proteins);
        setFats(fats);
        setCarbohydrates(carbohydrates);
        setAvailableWeight(availableWeight);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    public ProductRecord(jooq.sadiva.mpi.platformbackend.tables.pojos.Product value) {
        super(Product.PRODUCT);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setCalories(value.getCalories());
            setProteins(value.getProteins());
            setFats(value.getFats());
            setCarbohydrates(value.getCarbohydrates());
            setAvailableWeight(value.getAvailableWeight());
            resetChangedOnNotNull();
        }
    }
}
